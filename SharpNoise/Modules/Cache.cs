using SharpNoise.Modules.Buffers;

namespace SharpNoise.Modules;

/// <summary>
/// Noise module that caches the last output value generated by a source
/// module.
/// </summary>
/// <remarks>
/// If an application passes an input value to the <see cref="GetValue"/> method that
/// differs from the previously passed-in input value, this noise module
/// instructs the source module to calculate the output value.  This
/// value, as well as the ( x, y, z ) coordinates of the input
/// value, are stored (cached) in this noise module.
///
/// If the application passes an input value to the <see cref="GetValue"/> method
/// that is equal to the previously passed-in input value, this noise
/// module returns the cached output value without having the source
/// module recalculate the output value.
///
/// Caching a noise module is useful if it is used as a source module for
/// multiple noise modules.  If a source module is not cached, the source
/// module will redundantly calculate the same output value once for each
/// noise module in which it is included.
///
/// This noise module requires one source module.
/// </remarks>
public sealed class Cache : Module
{
    public override ReadOnlySpan<Module> SourceModules => buffer;
    private OneModuleBuffer buffer = new();

    private readonly struct CacheEntry(double x, double y, double z, double value)
    {
        public readonly double x = x;
        public readonly double y = y;
        public readonly double z = z;
        public readonly double value = value;
    }

    private CacheEntry cache = new(double.NaN, double.NaN, double.NaN, double.NaN);

    /// <summary>
    /// Gets or sets the first source module
    /// </summary>
    public Module Source0
    {
        get => buffer[0];
        set => buffer[0] = value;
    }

    /// <summary>
    /// See the documentation on the base class.
    /// <seealso cref="Module"/>
    /// </summary>
    /// <param name="x">X coordinate</param>
    /// <param name="y">Y coordinate</param>
    /// <param name="z">Z coordinate</param>
    /// <returns>Returns the computed value</returns>
    public override double GetValue(double x, double y, double z)
    {
        if (cache.x == x && cache.y == y && cache.z == z)
            return cache.value;

        double value = buffer[0].GetValue(x, y, z);
        cache = new CacheEntry(x, y, z, value);
        return value;
    }
}
